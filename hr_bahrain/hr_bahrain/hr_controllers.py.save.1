from __future__ import unicode_literals
import frappe
from frappe import _, msgprint
from frappe.utils import flt,cint, cstr, getdate
from erpnext.hr.doctype.leave_allocation.leave_allocation import get_carry_forwarded_leaves
@frappe.whitelist()
def allocate_annual_leave_monthly(self,status = None):
	frappe.msgprint('hi')
        employee = frappe.db.sql("""select name,employee_name,vacation_starts_from from `tabEmployee` where status = 'Active'""")
        for emp in employee:
                max_to_date = frappe.db.sql("""select MAX(to_date) from `tabLeave Allocation` where employee = '{}'""".format(emp[0]))

                if max_to_date:
                        #frappe.msgprint(frappe.as_json(max_to_date))
                        #frappe.msgprint(frappe.as_json(max_to_date[0][0]))

                        if not max_to_date[0][0]:
                                start_date = emp[2]
                                end_date = frappe.utils.add_days(start_date,2)
                                #frappe.msgprint('1')
                                #frappe.msgprint(frappe.as_json(start_date))
                                #frappe.msgprint(frappe.as_json(end_date))

                        else:
                                start_date = max_to_date[0][0]
                                end_date = frappe.utils.add_days(start_date,2)
                                #frappe.msgprint('2')
                                #frappe.msgprint(frappe.as_json(start_date))
                                #frappe.msgprint(frappe.as_json(end_date))
                carry_fwd_leave = get_carry_forwarded_leaves(emp[0],'Casual Leave',start_date,1)
                if carry_fwd_leave % 1 == 0:
                        end_date = frappe.utils.add_days(end_date,1)
                #frappe.msgprint('hi')
                #frappe.msgprint(frappe.as_json(carry_fwd_leave))
                leave_allocation_doc = frappe.new_doc("Leave Allocation")
                leave_allocation_doc.update({'employee': emp[0], 'employee_name': emp[1],'leave_type':'Casual Leave','from_date':start_date,'to_date':end_date,'new_leaves_allocated':2.5,'carry_forward':1,'carry_forwarded_leaves':carry_fwd_leave,'total_leaves_allocated':carry_fwd_leave+2.5})
                leave_allocation_doc.docstatus = 1
                leave_allocation_doc.flags.ignore_validate = True
                leave_allocation_doc.flags.ignore_mandatory = True
                leave_allocation_doc.flags.ignore_validate_update_after_submit = True
                leave_allocation_doc.flags.ignore_links = True
                leave_allocation_doc.save()
                leave_allocation_doc.submit()

        frappe.db.commit()

def get_emp_gross_salary(emp):

    sql = """SELECT base FROM `tabSalary Structure` ss,`tabSalary Structure Employee` se WHERE	ss.`name` = se.parent 
and se.employee = '{0}' ORDER BY se.from_date DESC LIMIT 1""".format(emp)

    gross_salary = frappe.db.sql(sql)

    if gross_salary:
        gross_salary = gross_salary[0][0]
    else:
        gross_salary = 0

    return gross_salary


def get_paid_gratuity(emp, till_date):

    sql = """ select ifnull(sum(gratuity_paid),0)
		from `tabGratuity Payment`
		where employee = '{0}'
		and docstatus = 1
		and date <= '{1}' """ .format(emp, till_date)

    gratuity_paid = frappe.db.sql(sql)

    if gratuity_paid:
        gratuity_paid = gratuity_paid[0][0]
    else:
        gratuity_paid = 0

    return gratuity_paid

def calc_gratuity(no_of_years, days_per_year, gratuity_days, gross_salary):

    total_no_of_months = no_of_years * 12
    # total_no_of_months = 168

    total_no_of_days_gratuity = no_of_years * days_per_year
    # total_no_of_days_gratuity = 4936

    total_no_of_days_for_gratuity = no_of_years * gratuity_days
    # total_no_of_days_for_gratuity =====> 11 years = 330, 3 years = 45 ===> 375

    days_per_month_gratuity = total_no_of_days_for_gratuity / total_no_of_months
    # days_per_month_gratuity = 2.2321425

    gratuity_per_working_day = days_per_month_gratuity / 30
    #  gratuity_per_working_day = 0.07440475

    gratuity_for_total_working_days = gratuity_per_working_day * total_no_of_days_gratuity
    # gratuity_for_total_working_days = 367.261846

    basic_salary = gross_salary * 12
    # basic_salary = 5400

    per_day_basic_salary = basic_salary / 365
    # per_day_basic_salary = 14.79

    amount_of_gratuity = (per_day_basic_salary * gratuity_for_total_working_days) or 0
    # amount_of_gratuity = 5431.8027
    return amount_of_gratuity


def get_gratuity_calc_start_date(emp):

    sql = """SELECT ifnull(max(p.date), e.date_of_joining) dated
	FROM `tabGratuity Payment` p
	RIGHT OUTER JOIN tabEmployee e on (p.employee = e.`name`)
	WHERE e.`name` = '{0}' """.format(emp)

    d = frappe.db.sql(sql)
    if d:
        d = d[0][0]

    return d

@frappe.whitelist()
def calculate_gratuity(self,status = None):

	sql = """ Select name, employee_name, gratuity_payable_till_date, gratuity_till_date, date_of_joining from `tabEmployee`
        	where `status`= 'Active' """

        emp_list = frappe.db.sql(sql, as_dict=1)

        days_per_year = 365.0
        now = datetime.datetime.now().date()
        s_now = now.strftime('%Y-%m-%d')

        for emp in emp_list:
            date_of_joining = emp.date_of_joining#get_gratuity_calc_start_date(emp.name)
            joining_date = datetime.datetime.strptime(date_of_joining, '%Y-%m-%d').date()
            diff = dateutil.relativedelta.relativedelta(now, joining_date)
            working_years = dateutil.relativedelta.relativedelta(now, joining_date).years

            gross_salary = get_emp_gross_salary(emp.name)

            sum_gross_gratuity = 0
            sum_gross_payable = 0

            s_last_date = joining_date.strftime('%Y-%m-%d')

            # for complete years
            for yc in range(working_years):
                if yc > 3.0:
                    b = 0
                    b += 1
                    gratuity_days = 15.0
                    if b > 3:
                        gratuity_days = 30.0
                    gross_gratuity = calc_gratuity(yc, days_per_year, gratuity_days, gross_salary)
                    sum_gross_gratuity += gross_gratuity
                else:
                    gratuity_days = 15.0
                    gross_gratuity = calc_gratuity(yc, days_per_year, gratuity_days, gross_salary)
                    sum_gross_gratuity += gross_gratuity

            gratuity_paid = get_paid_gratuity(emp.name, s_now)
            emp_doc = frappe.get_doc('Employee', emp.name)
            emp_doc.gratuity_till_date = sum_gross_gratuity
            emp_doc.gratuity_payable_till_date = sum_gross_payable
            emp_doc.gratuity_paid_till_date = gratuity_paid
            emp_doc.gratuity_balance_till_date = sum_gross_payable - gratuity_paid + gratuity_paid
            emp_doc.net_salary = gross_salary
            emp_doc.basic_salary = gross_salary * 0.45

            emp_doc.db_update()

    except Exception as e:
        print e
    finally:
        frappe.db.commit()
        frappe.destroy()
